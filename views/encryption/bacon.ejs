<div class="encryption">
    <div class="text-3xl mt-16 mb-8" id="bacon">Bacon</div>
    <div class="flex">
      <div x-data={show:false,animate:false} class="w-full">
        <p x-on:click.prevent="show=!show,animate=!animate" class="flex p-2 cursor-pointer">
          <a class="focus:outline-none mr-2 font-bold">
            Example Code 
          </a>
          <i x-show="!show" class="mt-2 fas fa-sort-up"></i>
          <i x-show="show" class="mb-2 fas fa-sort-down"></i>
        </p> 
        <div x-show="show,animate" 
          x-transition:enter="transition linear duration-500" 
          x-transition:enter-start="opacity-0 transform scale-90" 
          x-transition:enter-end="opacity-100 transform scale-100" 
          class="border px-2 py-2 text-gray-700 mt-3">
<pre>
<code class="javascript">const bacon = require('bacon-cipher');

function encode(data){
    const encoded = bacon.encode(data);
    return encoded;
}

function decode(data){
    const decoded = bacon.decode(data);
    return decoded;
}

let encoded = encode("encode");
let decoded = decode(encoded);
console.log(encoded);
console.log(decoded);
</code></pre>
        </div>

        <div class="encrypt mt-2" x-data={show:false,animate:false}>
          <p x-on:click.prevent="show=!show,animate=!animate" class="flex p-2 cursor-pointer">
            <a class="focus:outline-none mr-2 font-bold">
              Encode
            </a>
            <i x-show="!show" class="mt-2 fas fa-sort-up"></i>
            <i x-show="show" class="mb-2 fas fa-sort-down"></i>
          </p> 
          <div x-show="show,animate" 
          x-transition:enter="transition linear duration-500" 
          x-transition:enter-start="opacity-0 transform scale-90" 
          x-transition:enter-end="opacity-100 transform scale-100">

            <form class="w-full max-w-lg" enctype="multipart/form-data" x-data="encodeBacon()" @submit.prevent="submitData">
              <div class="flex flex-wrap mt-2 mb-6">
                <div class="w-full md:w-1/2 px-3">
                  <label class="block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2" for="text">
                    Input text (Plain text)
                  </label>
                  <input class="appearance-none block w-full bg-gray-200 text-gray-700 rounded py-3 px-4 mb-3 leading-tight border border-gray-700 focus:outline-none focus:bg-white" id="text" type="text" placeholder="Jane" x-model="formData.data">
                </div>
              </div>
              <div class="flex flex-wrap mb-6">
                <div class="w-full px-3">
                  <button class="bg-blue-600 hover:bg-blue-700 border-b-4 border-solid border-blue-800 px-4 py-2 text-white" id="encodeBacon">Encode!</button>
                </div>
              </div>
              <div class="flex flex-wrap mb-6">
                <div class="w-full px-3">
                  <label class="block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2" for="encoded">
                    Result
                  </label>
                  <input readonly class="appearance-none block w-full bg-gray-200 text-gray-700 rounded py-3 px-4 mb-3 leading-tight border border-gray-700 focus:outline-none focus:bg-white" id="encoded" type="text" placeholder="Jane" x-model="message">
                </div>
              </div>
            </form>

          </div>  
        </div>

        <div class="decrypt mt-2" x-data={show:false,animate:false}>
          <p x-on:click.prevent="show=!show,animate=!animate" class="flex p-2 cursor-pointer">
            <a class="focus:outline-none mr-2 font-bold">
              Decode
            </a>
            <i x-show="!show" class="mt-2 fas fa-sort-up"></i>
            <i x-show="show" class="mb-2 fas fa-sort-down"></i>
          </p> 
          <div x-show="show,animate" 
          x-transition:enter="transition linear duration-500" 
          x-transition:enter-start="opacity-0 transform scale-90" 
          x-transition:enter-end="opacity-100 transform scale-100">

            <form class="w-full max-w-lg" enctype="multipart/form-data" x-data="decodeBacon()" @submit.prevent="submitData">
              <div class="flex flex-wrap mt-2 mb-6">
                <div class="w-full md:w-1/2 px-3">
                  <label class="block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2" for="text">
                    Input text (bacon text)
                  </label>
                  <input class="appearance-none block w-full bg-gray-200 text-gray-700 rounded py-3 px-4 mb-3 leading-tight border border-gray-700 focus:outline-none focus:bg-white" id="text" type="text" placeholder="Jane" x-model="formData.data">
                </div>
              </div>
              <div class="flex flex-wrap mb-6">
                <div class="w-full px-3">
                  <button class="bg-blue-600 hover:bg-blue-700 border-b-4 border-solid border-blue-800 px-4 py-2 text-white" id="decodeBacon">Decode!</button>
                </div>
              </div>
              <div class="flex flex-wrap mb-6">
                <div class="w-full px-3">
                  <label class="block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2" for="decoded">
                    Result
                  </label>
                  <input readonly class="appearance-none block w-full bg-gray-200 text-gray-700 rounded py-3 px-4 mb-3 leading-tight border border-gray-700 focus:outline-none focus:bg-white" id="decoded" type="text" placeholder="Jane" x-model="message">
                </div>
              </div>
            </form>

          </div>  
        </div>
    </div>
  </div>
</div>

<script>
function encodeBacon() {
    return {
        formData: {
            data: ''
        },
        message: '',
        loading: false,
        buttonLabel: 'Encode',
  
        submitData() {
            this.buttonLabel = 'encoding...';
            this.loading = true;
            this.message = '';
              
            fetch('bacon/encode', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(this.formData)
            })
            .then(response => response.json())
            .then((data) => {
                this.message = data.message
            })
            .catch(() => {
                this.message = 'Ooops! Something went wrong!'
            })
            .finally(() => {
                this.loading = false;
                this.buttonLabel = 'Encode'
            })
        }
    }
}
  
function decodeBacon() {
    return {
        formData: {
            data: ''
        },
        message: '',
        loading: false,
        buttonLabel: 'Decode',
          
        submitData() {
            this.buttonLabel = 'decoding...';
            this.loading = true;
            this.message = '';
              
            fetch('bacon/decode', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(this.formData)
            })
            .then(response => response.json())
            .then((data) => {
                this.message = data.message
            })
            .catch(() => {
                this.message = 'Ooops! Something went wrong!'
            })
            .finally(() => {
                this.loading = false;
                this.buttonLabel = 'Decode'
            })
        }
    }
}
</script>
